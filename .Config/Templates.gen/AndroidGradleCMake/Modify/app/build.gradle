import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    ndkVersion "##FSL_NDK_VERSION##"
    defaultConfig {
        applicationId "com.freescale.##PREFIXED_PROJECT_NAME_L##.##PACKAGE_TARGET_NAME##"
        minSdkVersion ##FSL_PACKAGE_MIN_ANDROID_SDK_VERSION##
        targetSdkVersion ##FSL_PACKAGE_TARGET_ANDROID_SDK_VERSION##
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared"
                cppFlags "-std=c++20 -frtti -fexceptions"
                version "3.18.1"
            }
        }
        
        ndk {
          abiFilters ##PACKAGE_VARIANT_ANDROID_ABIS##
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // For ease of use we utilize the debug certificate for release (remove this to do a properly signed release build)
            signingConfig debug.signingConfig
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    buildFeatures.prefab true
    namespace 'com.freescale.##PREFIXED_PROJECT_NAME_L##'
    compileSdk ##FSL_PACKAGE_TARGET_ANDROID_SDK_VERSION##
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.core:core:1.15.0'
    implementation 'androidx.games:games-activity:3.0.5'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    // Use relinker as recommended by the android documentation at
    // https://developer.android.com/ndk/guides/cpp-support.html#c_runtime_libraries
    // https://github.com/KeepSafe/ReLinker
    implementation 'com.getkeepsafe.relinker:relinker:1.4.3'
}

tasks.register('buildContentFiles', Exec) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'python', "${System.env.FSL_GRAPHICS_SDK}/.Config/FslBuildContent.py", '-p', 'android', '--Variants', '[##VARIANT_LIST##]', '--input', '##PACKAGE_PATH##'
    } else {
        commandLine "${System.env.FSL_GRAPHICS_SDK}/.Config/FslBuildContent.py", '-p', 'android', '--Variants', '[##VARIANT_LIST##]', '--input', '##PACKAGE_PATH##'
    }
}

tasks.register('syncContentFiles', Exec) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'python', "${System.env.FSL_GRAPHICS_SDK}/.Config/FslContentSync.py", '##PACKAGE_CONTENT_PATH##', '##PACKAGE_ANDROID_PROJECT_PATH##/app/src/main/assets/fsl-content', '-i', '--create', '--ifExist'
    } else {
        commandLine "${System.env.FSL_GRAPHICS_SDK}/.Config/FslContentSync.py", '##PACKAGE_CONTENT_PATH##', '##PACKAGE_ANDROID_PROJECT_PATH##/app/src/main/assets/fsl-content', '-i', '--create', '--ifExist'
    }
}

syncContentFiles.dependsOn(buildContentFiles)
preBuild.dependsOn(syncContentFiles)
